def is_valid_dict(self, d):
        """Check if a dictionary is valid."""
        for key, value in d.items():
            if key in HBNBCommand.types:
                # If the key is in types, try to cast the value to the specified type
                try:
                    d[key] = HBNBCommand.types[key](value)
                except ValueError:
                    return False
        return True

def do_create(self, args):
    """ Create an object of any class with given parameters"""
    if not args:
        print("** class name missing **")
        return

    args_list = args.split()
    class_name = args_list[0]

    if class_name not in HBNBCommand.classes:
        print("** class doesn't exist **")
        return

    params = args_list[1:]
    obj_dict = {}

    for param in params:
        match = re.match(r'^([^=]+)=(.*)$', param)
        if match:
            key, value = match.groups()
            if value[0] == '"' and value[-1] == '"':
                # String value
                value = value[1:-1].replace('_', ' ').replace('\\"', '"')
            elif '.' in value:
                # Float value
                value = float(value)
            else:
                # Integer value
                value = int(value)
            obj_dict[key] = value

    if not self.is_valid_dict(obj_dict):
        print("** invalid parameter value(s) **")
        return

    new_instance = HBNBCommand.classes[class_name](**obj_dict)
    storage.save()
    print(new_instance.id)
    storage.save()

    def do_create(self, args):
        """ Create an object of any class"""
        if not args:
            print("** class name missing **")
            return
        
        class_name, *parameters = args.split()

        if class_name not in HBNBCommand.classes:
            print("** class doesn't exist **")
            return
        
        param_dict = {}

        for param in parameters:
            # Split parameter into key and value
            key, value = param.split('=')

            # Handle string values
            if value.startswith('"') and value.endswith('"'):
                # Remove quotes and replace underscores with spaces
                value = value[1:-1].replace('_', ' ')
            # Handle float values
            elif '.' in value:
                try:
                    value = float(value)
                except ValueError:
                    print(f"Error parsing float value for key '{key}'")
                    continue
            # Handle integer values
            else:
                try:
                    value = int(value)
                except ValueError:
                    print(f"Error parsing integer value for key '{key}'")
                    continue

            # Add the parameter to the dictionary
            param_dict[key] = value

        new_instance = HBNBCommand.classes[class_name](**param_dict)
        print(new_instance.id)
        storage.save()

if not kwargs:
            from models import storage
            self.id = str(uuid.uuid4())
            self.created_at = datetime.now()
            self.updated_at = datetime.now()
            storage.new(self)
        else:
            print("DEBUG: kwargs before updating 'updated_at':", kwargs)
            kwargs['updated_at'] = datetime.strptime(kwargs['updated_at'], '%Y-%m-%dT%H:%M:%S.%f')
            print("DEBUG: kwargs after updating 'updated_at':", kwargs)
            kwargs['created_at'] = datetime.strptime(kwargs['created_at'], '%Y-%m-%dT%H:%M:%S.%f')
            del kwargs['__class__']
            self.__dict__.update(kwargs)


 id = Column(String(60), nullable=False, primary_key=True)
    updated_at = Column(DateTime, nullable=False, default=datetime.utcnow())
    created_at = Column(DateTime, nullable=False, default=datetime.utcnow())

    def __init__(self, *args, **kwargs):
        """Instatntiates a new model"""
        self.id = str(uuid.uuid4())
        self.created_at = datetime.utcnow()
        self.updated_at = datetime.utcnow()

        if kwargs:
            for key, value in kwargs.items():
                if key[0].isupper():
                    raise KeyError
                if key is None or value is None:
                    raise TypeError
                if key == "created_at" or key == "updated_at":
                    value = datetime.strptime(value, "%Y-%m-%dT%H:%M:%S.%f")
                if key != "__class__":
                    setattr(self, key, value)